package space_invaders.sprites;

import main.Commons;

import javax.swing.ImageIcon;

/**
 * {@summary Clase que representa un alien en el juego Space Invaders.}
 * 
 * Cada alien tiene una posici√≥n (x, y) y puede lanzar una bomba.
 * Proporciona m√©todos para inicializar el alien, moverlo y acceder a su bomba. 
 * La clase {@link Bomb} es una clase interna que representa la bomba lanzada por el alien.
 */
public class Alien extends Sprite {

    private Bomb bomb;

    /**
     * Inicializa un nuevo alien
     * @param x coordenada X de la posici√≥n del nu
     * @param y coordenada Y de la posici√≥n del nuevo alien
     * */
    public Alien(int x, int y) {

        initAlien(x, y);
    }

    /**
     * {@summary Configura el estado inicial del alien estableciendo su posici√≥n en el tablero.}
     * 
     * Este m√©todo prepara el alien para participar en el juego, asign√°ndole una ubicaci√≥n
     * espec√≠fica y todos los recursos necesarios para su funcionamiento. El alien quedar√°
     * completamente operativo tras la ejecuci√≥n.
     * 
     * El m√©todo garantiza que el alien siempre tendr√° una posici√≥n v√°lida dentro del
     * √°rea de juego, independientemente de los valores de entrada proporcionados. Si alguna de las coordenadas indicadas supera los m√°rgenes de la pantalla, se ubicar√° en el m√°ximo permitido.
     * Por ejemplo, si la coordenada X indicada supera el margen de la pantalla, se asignar√° a X el valor m√°ximo posible, es decir, el ancho de la pantalla.
     * Si se introduce alguna coordenada negativa, se reemplazar√° por 0.
     * 
     * @param x coordenada horizontal donde se desea ubicar el alien
     * @param y coordenada vertical donde se desea ubicar el alien
     * 
     * <dl class="notes"><dt>Postcondici√≥n:</dt> <dd>El alien queda listo en la posici√≥n especificada
     * y su posici√≥n es v√°lida dentro del tablero de juego.</dd></dl>
     */
     private void initAlien(int x, int y) {

        if (x> Commons.BOARD_WIDTH){
            this.x = Commons.BOARD_WIDTH;
        } if (x<0){
            this.x = 0;
        } if (y> Commons.BOARD_HEIGHT){
            this.y = Commons.BOARD_HEIGHT;
        } if (y<0){
            this.y=0;
        }
        else
        {
            this.x = x;
            this.y = y;
        }

        bomb = new Bomb(x, y);

        var alienImg = "src/main/resources/images/alien.png";
        var ii = new ImageIcon(alienImg);

        setImage(ii.getImage());
    }

    /**
     * {@summary Ejecuta una acci√≥n de movimiento del alien en la direcci√≥n especificada.}
     * 
     * <p>Este m√©todo actualiza la posici√≥n horizontal del alien seg√∫n el par√°metro
     * de direcci√≥n proporcionado. El alien se desplazar√° en el tablero de juego
     * manteniendo su posici√≥n vertical constante.</p>
     * 
     * @param direction valor que determina la direcci√≥n y magnitud del movimiento horizontal
     * 
     * <dl class="notes"><dt>Postcondici√≥n:</dt> <dd>La posici√≥n horizontal del alien se actualiza 
     * seg√∫n la direcci√≥n especificada.</dd></dl>
     */
    public void act(int direction) {

        this.x -= direction;
    }

    /**
     * {@summary <span class="alert-small">‚õîüß™</span> Devuelve el objeto explosi√≥n asociado al alien}
     * 
     * <br><br><span class="alert">‚õîüß™ No es necesario probar el m√©todo mediante pruebas unitarias.</span>
     * @return bomb
     * */
    public Bomb getBomb() {

        return bomb;
    }

    /**
     * {@summary Clase interna que representa una bomba lanzada por un alien.}
     * 
     * La bomba tiene una posici√≥n (x, y) y un estado de destrucci√≥n.
     * Proporciona m√©todos para inicializar la bomba, verificar su estado
     * y modificar su estado de destrucci√≥n.
     */
    public class Bomb extends Sprite {
        
        private boolean destroyed;

        /**
         * {@summary Crea una nueva bomba en la posici√≥n indicada}
         * 
         * @param x coordenada X de la posici√≥n de la nueva explosi√≥n
         * @param y coordenada Y de la posici√≥n de la nueva explosi√≥n
         * */
        public Bomb(int x, int y) {

            initBomb(x, y);
        }

        /**
         * {@summary Inicializa el nuevo objeto bomba y le asigna las coordenadas indicadas y la imagen correspondiente en la interfaz}
         * 
         * @param x coordenada X de la posici√≥n de la nueva bomba
         * @param y coordenada Y de la posici√≥n de la nueva bomba
         * Si el valor X o Y indicados superan el margen de la pantalla, se les asignar√° el valor m√°ximo permitido.
         * Si se introduce alg√∫n valor negativo, ser√° reemplazado por 0.
         * */
        private void initBomb(int x, int y) {

            setDestroyed(true);

            if (x<= Commons.BOARD_WIDTH && y<= Commons.BOARD_HEIGHT) {
                this.x += x;
                this.y += y;
            } else
            {
                this.x = Commons.BOARD_WIDTH;
                this.y = Commons.BOARD_HEIGHT;
            }

            var bombImg = "src/main/resources/images/bomb.png";
            var ii = new ImageIcon(bombImg);
            setImage(ii.getImage());
        }

        /**
         * {@summary <span class="alert-small">‚õîüß™</span> Establece el estado de destrucci√≥n de la bomba.}
         * 
         * <br><br><span class="alert">‚õîüß™ No es necesario probar este m√©todo mediante pruebas unitarias.</span>
         * @param destroyed valor booleano que indica si la bomba est√° destruida (true) o no (false)
         */
        public void setDestroyed(boolean destroyed) {

            this.destroyed = destroyed;
        }
        
        /**
         * {@summary <span class="alert-small">‚õîüß™</span> Indica si la bomba est√° destruida.}
         * 
         * <br><br><span class="alert">‚õîüß™ No es necesario probar el m√©todo mediante pruebas unitarias.</span>
         * @return true si la bomba est√° destruida, false en caso contrario
         */
        public boolean isDestroyed() {

            return destroyed;
        }
    }
}
